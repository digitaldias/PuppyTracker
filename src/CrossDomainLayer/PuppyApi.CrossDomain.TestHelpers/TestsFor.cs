using Moq;
using StructureMap.AutoMocking.Moq;


namespace PuppyApi.CrossDomain.TestHelpers
{
    public abstract class TestsFor<TEntity> where TEntity : class
    {
        /// <summary>
        /// This is the instance being tested
        /// </summary>
        public TEntity Instance { get; set; }

        /// <summary>
        /// This is the AutoMocker object that fills in all the dependencies for the Instance under test
        /// </summary>
        public MoqAutoMocker<TEntity> AutoMock { get; set; }

        /// <summary>
        /// Initiates the test instance and populate it with all mocks
        /// </summary>
        public TestsFor()
        {
            AutoMock = new MoqAutoMocker<TEntity>();

            BeforeInstanceCreated();

            Instance = AutoMock.ClassUnderTest;
        }

        /// <summary>
        /// Return the Mock object that owns the instance of TContract
        /// </summary>
        /// <typeparam name="TContract">Type of contract for which the mock exists. Reference types only</typeparam>
        /// <returns>A Moq<TContract> that you can use to do setups and verifications on</TContract></returns>
        public Mock<TContract> GetMockFor<TContract>() where TContract : class
        {
            return Mock.Get(AutoMock.Get<TContract>());
        }

        /// <summary>
        /// Replace TContract with provided instance and rebuilds the Instance under test
        /// </summary>
        /// <typeparam name="TContract">The interface to replace</typeparam>
        /// <param name="instance">The class/object to use as an instance instead of the default mock</param>
        public void InjectSingle<TContract>(TContract instance) where TContract : class
        {
            AutoMock = new MoqAutoMocker<TEntity>();
            AutoMock.Inject<TContract>(instance);
            Instance = AutoMock.ClassUnderTest;
        }

        /// <summary>
        /// Replaces the autogenerated TContract with your provided instance
        /// NOTE: This method can only be called within 'BeforeInstanceCreation()'
        /// <see cref="BeforeInstanceCreated"/>
        /// </summary>
        /// <typeparam name="TContract">The interface to target</typeparam>
        /// <param name="instance">Your implenentation of the interface</param>
        public void Inject<TContract>(TContract instance) where TContract : class
        {
            AutoMock.Inject<TContract>(instance);
        }

        /// <summary>
        /// Overridable method for executing code and setups before the testable instance is created
        /// </summary>
        virtual public void BeforeInstanceCreated(){
        }

        /// <summary>
        /// Overridable method for executing code after instance is created
        /// </summary>
        virtual public void AfterInstanceCreated(){

        }
    }
}
