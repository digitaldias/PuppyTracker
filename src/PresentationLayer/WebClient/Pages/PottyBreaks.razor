@page "/pottyBreaks"
@using Newtonsoft.Json
@using PuppyApi.Domain.Entities
@using System.Net.Http

<h1>PottyBreaks</h1>

<p>When is your dog doing his stuff?</p>
<SinglePottyBreak SaveNewPottyBreak="AddNewPottyPottyBreak" />
<br />

@if (_pottyBreaks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>When</th>
                <th>Peed</th>
                <th>Pooed</th>
                <th>Comment</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pottyBreak in _pottyBreaks)
            {
                <tr>
                    <td>@(pottyBreak.Id.ToString().Substring(0, 5))...</td>
                    <td>@pottyBreak.DateTime.ToString("dddd, dd MMM HH:mm")</td>
                    <td>@pottyBreak.Peed</td>
                    <td>@pottyBreak.Pooed</td>
                    <td>@pottyBreak.Comment</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private PottyBreak[] _pottyBreaks;

    protected override async Task OnInitializedAsync()
    {
        var client = new HttpClient();
        var url = "http://localhost:58102/api/potty";
        var breaks = await client.GetJsonAsync<PottyBreak[]>(url);
        if (breaks != null && breaks.Any())
            _pottyBreaks = breaks.OrderByDescending(b => b.DateTime).ToArray();
    }

    private async void AddNewPottyPottyBreak(PottyBreak newPottyBreak)
    {
        var client = new HttpClient();
        var url = $"http://localhost:58102/api/potty/{newPottyBreak.Id.ToString()}";
        var json = JsonConvert.SerializeObject(newPottyBreak);

        await client.PutJsonAsync(url,  newPottyBreak);
    }
}
