@page "/pottyBreaks"
@using PuppyApi.Domain.Entities
@using PuppyTrackerClient.Data
@inject IJSRuntime jsRuntime

<h1>PottyBreaks</h1>

<p>When is your dog doing his stuff?</p>
<SinglePottyBreak SavePottyBreak="SaveOrUpdatePottyBreak" SelectedPottyBreak="_selectedPottyBreak"/>
<br />
@if (_pottyBreaks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-hover table-sm">
        <thead class="thead-light">
            <tr>             
                <th>When</th>
                <th>Peed</th>
                <th>Pooed</th>
                <th>Comment</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pottyBreak in _pottyBreaks)
            {
                <tr @onclick="() => _selectedPottyBreak = pottyBreak">      
                    <td>@pottyBreak.DateTime.ToString("dddd, dd MMM HH:mm")</td>
                    <td>@pottyBreak.Peed</td>
                    <td>@pottyBreak.Pooed</td>
                    <td>@pottyBreak.Comment</td>
                    <td><button @onclick="() => DeleteCurrent(pottyBreak)"><span class="oi oi-trash" style="color:red;"></span></button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code 
{    

    private List<PottyBreak> _pottyBreaks;
    private PottyBreak _selectedPottyBreak;
    private PottyBreakApiClient apiClient { get; set; }


    private async Task DeleteCurrent(PottyBreak pottyBreak)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if(confirmed)
        {
            await apiClient.DeletePottyBreak(pottyBreak);
        }
    }

    private async Task SaveOrUpdatePottyBreak(PottyBreak newPottyBreak)
    {
        await apiClient.SaveOrUpdatePottyBreak(newPottyBreak);
        _pottyBreaks.Add(newPottyBreak);

    }

    protected override async Task OnParametersSetAsync()
    {
        _pottyBreaks = (await apiClient.GetPottyBreaksAsync()).ToList();
        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if(apiClient is null)
        {
            apiClient = new PottyBreakApiClient();
            apiClient.Notify += OnNotified;

        }

        _pottyBreaks = (await apiClient.GetPottyBreaksAsync()).ToList();

        await base.OnInitializedAsync();
    }

    public async Task OnNotified(PottyBreak pottyBreak)
    {
        await InvokeAsync(() => StateHasChanged());
    }
}
